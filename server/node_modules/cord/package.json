{
  "author": {
    "name": "ELLIOTTCABLE",
    "url": "http://ell.io/tt"
  },
  "name": "cord",
  "version": "1.0.0",
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "git://github.com/ELLIOTTCABLE/cord.git"
  },
  "main": "lib/cord.js",
  "engines": {
    "node": "~0.10.10"
  },
  "dependencies": {
    "lodash": "~1.2.1"
  },
  "readme": "cord\n====\nA `cord` is a sexy, styled JavaScript `String` that can print itself prettily.\n\nThis project was forked off of [percival][].\n\nCurrently, this involves intelligently handling ANSI escape codes for printing\nstyled strings to terminals; eventually, this should also print identically to\nHTML source that can be injected into a document.\n\n  [percival]: http://github.com/elliottcable/percival \"Pompous pretty-printer\"\n\nUsage\n=====\n`cord`s are created with plain `String`s and other `cord`s as child elements.\nThe stylings on nested `cord`s intelligently stack when printed.\n\nLet’s look at some examples. A basic `cord` just consists of a plain `String`,\nand some sort of styling:\n\n    sys.puts( cord.beget({ styles : {foreground: 'green'},\n                         elements : [\"Hello, world!\"] }) );\n![Basic example of a `cord`][basic]\n\nNot too difficult, right? Let’s move on to nesting `cord`, for more advanced\nfunctionality:\n\n    sys.puts( cord.beget({ styles : {foreground: 'red'},\n                         elements : [\"Merry \",\n                                     cord.beget({ styles : {foreground: 'green'},\n                                                elements : [\"Christmas\"] }),\n                                     \"!\"] }) );\n![A nested `cord`][nested]\n\nThat, fairly obviously, creates a red `cord`, containing another (green)\n`cord` as a child element. Finally, let’s examine a fairly complex multiply-\nnested `cord`:\n\n    var c  = cord.beget(), c2 = cord.beget(),\n        c3 = cord.beget(), c4 = cord.beget();\n    \n    c .elements.push('foo ', c2, ' grault');\n    c2.elements.push('bar ', c3, ' corge');\n    c3.elements.push('baz ', c4, ' quux');\n    c4.elements.push(      'qux'      );\n    \n    c .style({ foreground: 'red'   });    c2.style({ underline: 'single' });\n    c3.style({ foreground: 'green' });    c4.style({ underline: 'single' });\n    \n    sys.puts('['+c.toString()+']');\n![Quite a complex `cord`][complex]\n\nThere’s several important things to notice about how that ended up getting\ndisplayed:\n\n- The underline effect continued throughout the sub-nested styled strings\n- The end of the nested, underlined element did *not* cause the end of the\n  underline, it was already in effect, and the end of the outer `cord` with an\n  underline had not yet been reached\n- When the end of the green `cord` had been reached, the red colour was\n  restored (quite a difficult task, using ANSI codes, if I do say so myself!)\n- At the culmination of the entire `cord`, no wayward styles are left over\n  (i.e. the closing bracket is plain white, with no styling)… this is\n  important, as a stray code could screw up the display of everything else in\n  the user’s Terminal\n\nThese are the problems with previous, simpler ANSI printers that I was trying\nto solve with cord. I believe it achieves these goals wonderfully! ^_^\n\n  [basic]: http://github.com/elliottcable/cord/raw/Master/examples/basic.png\n  [nested]: http://github.com/elliottcable/cord/raw/Master/examples/nested.png\n  [complex]: http://github.com/elliottcable/cord/raw/Master/examples/complex.png\n",
  "readmeFilename": "README.markdown",
  "description": "cord ==== A `cord` is a sexy, styled JavaScript `String` that can print itself prettily.",
  "bugs": {
    "url": "https://github.com/ELLIOTTCABLE/cord/issues"
  },
  "_id": "cord@1.0.0",
  "dist": {
    "shasum": "7d8af5b6b651518c6db8feaf0c52085eab76acf3",
    "tarball": "https://registry.npmjs.org/cord/-/cord-1.0.0.tgz"
  },
  "_from": "cord@latest",
  "_npmVersion": "1.2.25",
  "_npmUser": {
    "name": "elliottcable",
    "email": "npm@elliottcable.name"
  },
  "maintainers": [
    {
      "name": "elliottcable",
      "email": "npm@elliottcable.name"
    }
  ],
  "directories": {},
  "_shasum": "7d8af5b6b651518c6db8feaf0c52085eab76acf3",
  "_resolved": "https://registry.npmjs.org/cord/-/cord-1.0.0.tgz"
}
